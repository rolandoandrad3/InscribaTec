/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames.Coordinador;

import Clases.Conectar;
import Frames.Admin.Principal;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;

/**
 *
 * @author Rolan
 */
public class RegistroProfesoresCO extends javax.swing.JFrame {

    /**
     * Creates new form RegistroProfesores
     */
    public RegistroProfesoresCO() {
        initComponents();
        setSize(800, 520);
        // Centrar la ventana en la pantalla
        setLocationRelativeTo(null);
        // Evitar que la ventana sea redimensionable
        setResizable(false);
        // Opcional: Establecer un título para la ventana
        setTitle("Registro de Profesores - Coordinador");
        cerrar();
        txtIDProfesor.setEnabled(false);
        mostrarTabla("");
        limpiarCampos();
        
        
        
    }
        public void cerrar(){
        try {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
             public void windowClosing(WindowEvent e){
                 confirmarsalida();
             }
            });
        } catch (Exception e) {
        }
     }
        
     public void confirmarsalida(){
         int valor = JOptionPane.showConfirmDialog(this,"Desea cerrar la aplicacion?","Advertencia",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
         if(valor==JOptionPane.YES_OPTION){
             JOptionPane.showMessageDialog(null, "Cerrando Aplicacion","",JOptionPane.INFORMATION_MESSAGE );
             System.exit(0);
         } 
     }
     
     public void mostrarTabla(String valor){
         // Configurar el modelo de la tabla
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID");
    modelo.addColumn("Nombre");
    modelo.addColumn("Apellido");
    modelo.addColumn("Correo");
    modelo.addColumn("Teléfono");

    tblProfesores.setModel(modelo);

    // Consulta SQL para obtener los datos
    String sql = "SELECT ID_Profesor, Nombre, Apellido, Correo, Telefono "
               + "FROM Profesores "
               + "WHERE CONCAT(Nombre, ' ', Apellido, ' ', Correo, ' ', Telefono) LIKE ?";

    try {
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setString(1, "%" + valor + "%"); // Filtrar por el valor proporcionado
        ResultSet rs = ps.executeQuery();

        // Llenar el modelo con los datos obtenidos
        while (rs.next()) {
            Object[] fila = new Object[5];
            fila[0] = rs.getInt("ID_Profesor");
            fila[1] = rs.getString("Nombre");
            fila[2] = rs.getString("Apellido");
            fila[3] = rs.getString("Correo");
            fila[4] = rs.getString("Telefono");
            modelo.addRow(fila);
        }

        tblProfesores.setModel(modelo); // Asignar el modelo a la tabla
    } catch (SQLException e) {
        System.err.println("Error al cargar los datos: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Error al cargar los datos. Contacte al administrador.", "Error", JOptionPane.ERROR_MESSAGE);
    }
     }
     private void limpiarCampos() {
    txtNombre.setText("");
    txtApellido.setText("");
    txtEmail.setText("");
    txtTelefono.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popBorrar = new javax.swing.JPopupMenu();
        popEliminar = new javax.swing.JMenuItem();
        BackAndFooter2 = new javax.swing.JPanel();
        btnBack2 = new javax.swing.JButton();
        lblfooter = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfesores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtIDProfesor = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtApellido = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtNombre = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtEmail = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtTelefono = new javax.swing.JTextPane();
        btnGuardarProfesor = new javax.swing.JToggleButton();
        btnActualizarProfesor = new javax.swing.JToggleButton();

        popEliminar.setText("Eliminar");
        popEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popEliminarActionPerformed(evt);
            }
        });
        popBorrar.add(popEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack2.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        btnBack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N
        btnBack2.setText("Vover");
        btnBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack2ActionPerformed(evt);
            }
        });

        lblfooter.setText("InscribaTec @ Universiad Tecnologica");

        javax.swing.GroupLayout BackAndFooter2Layout = new javax.swing.GroupLayout(BackAndFooter2);
        BackAndFooter2.setLayout(BackAndFooter2Layout);
        BackAndFooter2Layout.setHorizontalGroup(
            BackAndFooter2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackAndFooter2Layout.createSequentialGroup()
                .addComponent(btnBack2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 451, Short.MAX_VALUE)
                .addComponent(lblfooter)
                .addContainerGap())
        );
        BackAndFooter2Layout.setVerticalGroup(
            BackAndFooter2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackAndFooter2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(BackAndFooter2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblfooter, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBack2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Nombre");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Apellido");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Email");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Telefono");

        tblProfesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProfesores.setComponentPopupMenu(popBorrar);
        tblProfesores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProfesoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProfesores);

        txtIDProfesor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(txtIDProfesor);

        txtApellido.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(txtApellido);

        txtNombre.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jScrollPane4.setViewportView(txtNombre);

        txtEmail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jScrollPane5.setViewportView(txtEmail);

        txtTelefono.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jScrollPane6.setViewportView(txtTelefono);

        btnGuardarProfesor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnGuardarProfesor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/save.png"))); // NOI18N
        btnGuardarProfesor.setText("Guardar");
        btnGuardarProfesor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGuardarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarProfesorActionPerformed(evt);
            }
        });

        btnActualizarProfesor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnActualizarProfesor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/update.png"))); // NOI18N
        btnActualizarProfesor.setText("Actualizar");
        btnActualizarProfesor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnActualizarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProfesorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BackAndFooter2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnGuardarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnActualizarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addComponent(btnGuardarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnActualizarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(BackAndFooter2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack2ActionPerformed
        // TODO add your handling code here:
        VistaCoordinador vc = new VistaCoordinador();
        vc.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBack2ActionPerformed

    private void btnGuardarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarProfesorActionPerformed
        // Validar que todos los campos estén llenos
    if (txtNombre.getText().isEmpty() || txtApellido.getText().isEmpty() ||
        txtEmail.getText().isEmpty() || txtTelefono.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Consulta SQL para insertar un nuevo profesor
        String sql = "INSERT INTO Profesores (Nombre, Apellido, Correo, Telefono) VALUES (?, ?, ?, ?)";
        PreparedStatement ps = cn.prepareStatement(sql);

        // Asignar los valores de los campos de texto a los parámetros de la consulta
        ps.setString(1, txtNombre.getText());
        ps.setString(2, txtApellido.getText());
        ps.setString(3, txtEmail.getText());
        ps.setString(4, txtTelefono.getText());

        // Ejecutar la consulta
        int resultado = ps.executeUpdate();

        if (resultado > 0) {
            JOptionPane.showMessageDialog(this, "Profesor guardado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            mostrarTabla(""); // Actualizar la tabla
            limpiarCampos(); // Limpiar los campos
        } else {
            JOptionPane.showMessageDialog(this, "Error al guardar el profesor.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        System.err.println("Error al guardar el profesor: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Error al guardar el profesor. Contacte al administrador.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnGuardarProfesorActionPerformed

    private void btnActualizarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProfesorActionPerformed
       // Validar si hay una fila seleccionada en la tabla
    int filaSeleccionada = tblProfesores.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un profesor para actualizar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtener el ID del profesor de la fila seleccionada
    int idProfesor = Integer.parseInt(tblProfesores.getValueAt(filaSeleccionada, 0).toString());

    // Validar que los campos no estén vacíos
    if (txtNombre.getText().isEmpty() || txtApellido.getText().isEmpty() ||
        txtEmail.getText().isEmpty() || txtTelefono.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Consulta SQL para actualizar los datos del profesor
        String sql = "UPDATE Profesores SET Nombre = ?, Apellido = ?, Correo = ?, Telefono = ? WHERE ID_Profesor = ?";
        PreparedStatement ps = cn.prepareStatement(sql);

        // Asignar los valores de los campos de texto a los parámetros de la consulta
        ps.setString(1, txtNombre.getText());
        ps.setString(2, txtApellido.getText());
        ps.setString(3, txtEmail.getText());
        ps.setString(4, txtTelefono.getText());
        ps.setInt(5, idProfesor);

        // Ejecutar la consulta
        int resultado = ps.executeUpdate();

        if (resultado > 0) {
            JOptionPane.showMessageDialog(this, "Profesor actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            mostrarTabla(""); // Actualizar la tabla
            limpiarCampos(); // Limpiar los campos
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el profesor.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        System.err.println("Error al actualizar el profesor: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Error al actualizar el profesor. Contacte al administrador.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnActualizarProfesorActionPerformed

    private void popEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popEliminarActionPerformed
        // Validar si hay una fila seleccionada en la tabla
    int filaSeleccionada = tblProfesores.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un profesor para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtener el ID del profesor de la fila seleccionada
    int idProfesor = Integer.parseInt(tblProfesores.getValueAt(filaSeleccionada, 0).toString());

    // Confirmación antes de eliminar
    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar el profesor con ID " + idProfesor + "?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    if (confirmacion != JOptionPane.YES_OPTION) {
        return; // Cancelar la operación si el usuario selecciona "No"
    }

    // Realizar la eliminación en la base de datos
    try {
        String sql = "DELETE FROM Profesores WHERE ID_Profesor = ?";
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setInt(1, idProfesor);

        int resultado = ps.executeUpdate();
        if (resultado > 0) {
            JOptionPane.showMessageDialog(this, "Profesor eliminado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            mostrarTabla(""); // Actualizar la tabla
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar el profesor", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        System.err.println("Error al eliminar el profesor: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Error al eliminar el profesor. Contacte al administrador.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_popEliminarActionPerformed

    private void tblProfesoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProfesoresMouseClicked
        // TODO add your handling code here:
        // Obtener la fila seleccionada
    int filaSeleccionada = tblProfesores.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Asignar los valores de las columnas de la fila seleccionada a los campos
    txtNombre.setText(tblProfesores.getValueAt(filaSeleccionada, 1).toString()); // Columna 1: Nombre
    txtApellido.setText(tblProfesores.getValueAt(filaSeleccionada, 2).toString()); // Columna 2: Apellido
    txtEmail.setText(tblProfesores.getValueAt(filaSeleccionada, 3).toString()); // Columna 3: Correo
    txtTelefono.setText(tblProfesores.getValueAt(filaSeleccionada, 4).toString()); // Columna 4: Teléfono
    }//GEN-LAST:event_tblProfesoresMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesoresCO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesoresCO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesoresCO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroProfesoresCO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroProfesoresCO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackAndFooter2;
    private javax.swing.JToggleButton btnActualizarProfesor;
    private javax.swing.JButton btnBack2;
    private javax.swing.JToggleButton btnGuardarProfesor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblfooter;
    private javax.swing.JPopupMenu popBorrar;
    private javax.swing.JMenuItem popEliminar;
    private javax.swing.JTable tblProfesores;
    private javax.swing.JTextPane txtApellido;
    private javax.swing.JTextPane txtEmail;
    private javax.swing.JTextPane txtIDProfesor;
    private javax.swing.JTextPane txtNombre;
    private javax.swing.JTextPane txtTelefono;
    // End of variables declaration//GEN-END:variables
    Conectar conectado = new Conectar();
    Connection cn = conectado.conexion();
}
